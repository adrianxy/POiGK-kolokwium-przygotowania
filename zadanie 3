import com.sun.j3d.utils.geometry.*;
import javax.media.j3d.*;
import javax.swing.*;
import java.awt.*;
import com.sun.j3d.utils.universe.SimpleUniverse;
import javax.media.j3d.Transform3D;
import javax.vecmath.Color3f;
import javax.vecmath.Point3d;
import javax.vecmath.Point3f;
import javax.vecmath.Vector3f;


public class Pierwszy3D extends JFrame{

    Pierwszy3D(){
        
        super("Grafika 3D");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setResizable(false);
    
        GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();

        Canvas3D canvas3D = new Canvas3D(config);
        canvas3D.setPreferredSize(new Dimension(1200,800));

        add(canvas3D);
        pack();
        setVisible(true);

        BranchGroup scena = utworzScene();
	    scena.compile();

        SimpleUniverse simpleU = new SimpleUniverse(canvas3D);

        Transform3D przesuniecie_obserwatora = new Transform3D();
        przesuniecie_obserwatora.set(new Vector3f(0.0f,0.0f,16.0f));    //usadowienie kamery x,y,z

        simpleU.getViewingPlatform().getViewPlatformTransform().setTransform(przesuniecie_obserwatora);

        simpleU.addBranchGraph(scena);
    }

   BranchGroup utworzScene(){

      BranchGroup wezel_scena = new BranchGroup();

      TransformGroup obrot_animacja = new TransformGroup();
      obrot_animacja.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);
      wezel_scena.addChild(obrot_animacja);

//Obrot elementów
      Alpha alpha_animacja = new Alpha(-1,5000);        //odpowiada za obrót wokół środka, szybkość obrotów, genweruje kąt[0,1] w czasie 5sek, czyli pełny obrót to 5sek

      Transform3D os_obrotu = new Transform3D();
      os_obrotu.set(new Vector3f(0.0f,0.0f,0.0f));
      
    // włączyć, żeby był obrot wokół osi X a nie Z
//      Transform3D tmp_rot1 = new Transform3D();
//      tmp_rot1.rotZ(-Math.PI/2);
//      os_obrotu.mul(tmp_rot1);
      
      RotationInterpolator obracacz = new RotationInterpolator(alpha_animacja, obrot_animacja, os_obrotu, 0.0f , 2*(float)Math.PI); // obracam względem niedomyślnej osii obrotu

      BoundingSphere bounds = new BoundingSphere(new Point3d(0.0,0.0,0.0), 100.0);
      obracacz.setSchedulingBounds(bounds);
      obrot_animacja.addChild(obracacz);

//ŚWIATŁA
    // światło ogólne
      AmbientLight lightA = new AmbientLight();
      lightA.setInfluencingBounds(bounds);
      wezel_scena.addChild(lightA);

    // światło punktowe przesunięte
      BoundingSphere obszar_ogr =  new BoundingSphere(new Point3d(0.0d,0.0d,0.0d), 10.0d);
      PointLight swiatlo_pnkt = new PointLight(new Color3f(8.0f, 8.0f, 8.0f), new Point3f(0.0f,0.0f,0.0f), new Point3f(0.5f,0.5f,0.5f));
      swiatlo_pnkt.setInfluencingBounds(obszar_ogr); 
      
      Transform3D p_swiatla = new Transform3D();
      p_swiatla.set(new Vector3f(0.0f,2.0f,0.0f));     // położenie punktu światła 
      TransformGroup transformacja_swiatla = new TransformGroup(p_swiatla);
      transformacja_swiatla.addChild(swiatlo_pnkt);
      wezel_scena.addChild(transformacja_swiatla);      // #żeby obracać dać obrot_animacja jako rodzic

//KULA 
      // materiał kuli
      Material material_kuli = new Material(new Color3f(0.0f, 0.0f,0.5f), new Color3f(0.0f,0.0f,0.0f),
                new Color3f(0.0f, 1f, 0.0f), new Color3f(2.0f, 2.0f, 2.0f), 80.0f);
      
      ColoringAttributes cattr = new ColoringAttributes();
      cattr.setShadeModel(ColoringAttributes.SHADE_GOURAUD);
      
      Appearance wygladKuli = new Appearance();
      wygladKuli.setMaterial(material_kuli);
      wygladKuli.setColoringAttributes(cattr);
      
      // tworzenie kuli
      Sphere kula = new Sphere(0.5f, Sphere.GENERATE_NORMALS, 80, wygladKuli);   
      
      Transform3D p_kuli = new Transform3D();
      p_kuli.set(new Vector3f(-2.0f,0.0f,0.0f));     //położenie kuli
      
      TransformGroup transformacja_k = new TransformGroup(p_kuli);
      transformacja_k.addChild(kula);
      obrot_animacja.addChild(transformacja_k);     // obracanie kuli
      

      

//STOZEK
      // tworzenie stożka
      Cone stozek = new Cone(0.5f, 1.0f,wygladKuli);
      
      Transform3D p_stozka = new Transform3D();
      p_stozka.set(new Vector3f(0.0f,-2.0f,0.0f));     //położenie kulki
      
      TransformGroup transformacja_s = new TransformGroup(p_stozka);
      transformacja_s.addChild(stozek);
      obrot_animacja.addChild(transformacja_s);

//WALEC
      // wygląd walca, ale ja zastosowałem materiał kuli do budowy walca
      Appearance wygladWalca = new Appearance();
      wygladWalca.setColoringAttributes(new ColoringAttributes(3.0f,0.0f,0.0f,ColoringAttributes.NICEST));
      
      // twrzenie walca
      Cylinder walec = new Cylinder(0.5f,1f, wygladKuli);
      
      Transform3D p_walca = new Transform3D();
      p_walca.set(new Vector3f(2.0f,0.0f,0.0f));
      
      // obrót walca o 90deg
      Transform3D tmp_rot = new Transform3D();
      tmp_rot.rotZ(-Math.PI/2);
      p_walca.mul(tmp_rot);
      
      TransformGroup transformacja_w = new TransformGroup(p_walca); 
      transformacja_w.addChild(walec);
      obrot_animacja.addChild(transformacja_w);

      return wezel_scena;
    }

   public static void main(String args[]){
      new Pierwszy3D();
   }
}


